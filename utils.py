import os
import shutil
import zipfile
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
client = OpenAI()


def generate_new_name(original_name: str) -> str:
    """Generates a new name for a given file name using OpenAI.

    Args:
        original_name (str): The old name of the file.

    Returns:
        str: The new name of the file.
    """
    
    example = """Example 1: Original name: 'pikaso_texttoimage_Big-Parade-Float-With-Thanksgiving-Feasts-And-Perf' -> New name: 'Big Parade Float With Thanksgiving Feasts And Performance'
                 Example 2: Original name: 'pikaso_texttoimage_Big-Parade-Float-With-Thanksgiving-Feasts-And-Perf' -> New name: 'Big Parade Float With Thanksgiving Feasts'
                 Example 3: Original name: 'pikaso_edit_A-Cartoon-Dragon-Playing-The-Piano-In-A-Beautiful-' -> New name: 'A Cartoon Dragon Playing The Piano In A Beautifully'"""
   
    prompt = f""" You are provided with an original name of a file. Your task is to generate a new name for the file, using the original name. 
    
    Original Name Explanation:
        1) The name is a description of the file, but it is not formatted correctly
        2) It starts with some kind of label which indicates it was generated by a text to image model. 
        3) The image name is often not complete and ends abrubtly.
    
    Instructions:
        1) Make sure to use the original name to understand what the file is about.
        2) Remove the tag that indicates it was generated by text to image,
        3) Make sure the new name is complete and descriptive. Rephrase it if needed to explain the image better.
        4) The new name should not have any dashes or underscores, and should be in title case.
        5) The new name should make sense and not sound incomplete. If you cannot complete the last word of the name, then come up with a name without using it.
        6) The new name should be grammatically correct.
    
    Use these examples for reference:
        {example} 
    
    Output:
        Your output should just be the new name. 
    """

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": original_name}
        ]
    )

    new_name = completion.choices[0].message.content
    
    return new_name


def zip_up(renamed_files: list, zip_path: str) -> str:
    """Zips up the selected files into a zip file.

    Args:
        files (list): The list of file locations that need to be zipped up.
        zip_path (str): The path where the zip file should be saved. It is a directory path.

    Returns:
        str: The path of the zip file.
    """
    
    if not os.path.isdir(zip_path):
        raise ValueError(f"The provided zip_path must be a directory. Received: {zip_path}")
    
    zip_file_name = "renamed_images.zip"
    zip_file_path = os.path.join(zip_path, zip_file_name)
    if os.path.exists(zip_file_path):
        os.remove(zip_file_path)

    with zipfile.ZipFile(zip_file_path, 'w') as zipf:
        for file in renamed_files:
            zipf.write(file, os.path.basename(file)) 
    
    return zip_file_path


def clear_directory(directory):
    """Clears a given directory. If directory does not exist then creates it."""
    if os.path.exists(directory):
        shutil.rmtree(directory)
    os.makedirs(directory, exist_ok=True)